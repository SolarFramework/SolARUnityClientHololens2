// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data_sender.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_5fsender_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_5fsender_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_5fdata_5fsender_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5fdata_5fsender_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_5fdata_5fsender_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(int index);
namespace bcom {
namespace solar {
namespace cloud {
namespace rpc {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frames;
struct FramesDefaultTypeInternal;
extern FramesDefaultTypeInternal _Frames_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Matrix4x4;
struct Matrix4x4DefaultTypeInternal;
extern Matrix4x4DefaultTypeInternal _Matrix4x4_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace rpc
}  // namespace cloud
}  // namespace solar
}  // namespace bcom
PROTOBUF_NAMESPACE_OPEN
template<> ::bcom::solar::cloud::rpc::Empty* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Empty>(Arena*);
template<> ::bcom::solar::cloud::rpc::Frame* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Frame>(Arena*);
template<> ::bcom::solar::cloud::rpc::Frames* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Frames>(Arena*);
template<> ::bcom::solar::cloud::rpc::Image* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Image>(Arena*);
template<> ::bcom::solar::cloud::rpc::Matrix4x4* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Matrix4x4>(Arena*);
template<> ::bcom::solar::cloud::rpc::Message* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Message>(Arena*);
template<> ::bcom::solar::cloud::rpc::Pose* Arena::CreateMaybeMessage<::bcom::solar::cloud::rpc::Pose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bcom {
namespace solar {
namespace cloud {
namespace rpc {

enum ImageLayout : int {
  RGB_24 = 0,
  GREY_8 = 1,
  GREY_16 = 2,
  ImageLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImageLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImageLayout_IsValid(int value);
constexpr ImageLayout ImageLayout_MIN = RGB_24;
constexpr ImageLayout ImageLayout_MAX = GREY_16;
constexpr int ImageLayout_ARRAYSIZE = ImageLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageLayout_descriptor();
template<typename T>
inline const std::string& ImageLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImageLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImageLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImageLayout_descriptor(), enum_t_value);
}
inline bool ImageLayout_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImageLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImageLayout>(
    ImageLayout_descriptor(), name, value);
}
// ===================================================================

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();
  explicit constexpr Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();
  explicit constexpr Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kLayoutFieldNumber = 4,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .bcom.solar.cloud.rpc.ImageLayout layout = 4;
  void clear_layout();
  ::bcom::solar::cloud::rpc::ImageLayout layout() const;
  void set_layout(::bcom::solar::cloud::rpc::ImageLayout value);
  private:
  ::bcom::solar::cloud::rpc::ImageLayout _internal_layout() const;
  void _internal_set_layout(::bcom::solar::cloud::rpc::ImageLayout value);
  public:

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  int layout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// -------------------------------------------------------------------

class Frames PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Frames) */ {
 public:
  inline Frames() : Frames(nullptr) {}
  virtual ~Frames();
  explicit constexpr Frames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frames(const Frames& from);
  Frames(Frames&& from) noexcept
    : Frames() {
    *this = ::std::move(from);
  }

  inline Frames& operator=(const Frames& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frames& operator=(Frames&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frames& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frames* internal_default_instance() {
    return reinterpret_cast<const Frames*>(
               &_Frames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Frames& a, Frames& b) {
    a.Swap(&b);
  }
  inline void Swap(Frames* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frames* New() const final {
    return CreateMaybeMessage<Frames>(nullptr);
  }

  Frames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frames& from);
  void MergeFrom(const Frames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Frames";
  }
  protected:
  explicit Frames(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated .bcom.solar.cloud.rpc.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::bcom::solar::cloud::rpc::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcom::solar::cloud::rpc::Frame >*
      mutable_frames();
  private:
  const ::bcom::solar::cloud::rpc::Frame& _internal_frames(int index) const;
  ::bcom::solar::cloud::rpc::Frame* _internal_add_frames();
  public:
  const ::bcom::solar::cloud::rpc::Frame& frames(int index) const;
  ::bcom::solar::cloud::rpc::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcom::solar::cloud::rpc::Frame >&
      frames() const;

  // fixed64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Frames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcom::solar::cloud::rpc::Frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSensorIdFieldNumber = 1,
  };
  // .bcom.solar.cloud.rpc.Image image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::bcom::solar::cloud::rpc::Image& image() const;
  ::bcom::solar::cloud::rpc::Image* release_image();
  ::bcom::solar::cloud::rpc::Image* mutable_image();
  void set_allocated_image(::bcom::solar::cloud::rpc::Image* image);
  private:
  const ::bcom::solar::cloud::rpc::Image& _internal_image() const;
  ::bcom::solar::cloud::rpc::Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::bcom::solar::cloud::rpc::Image* image);
  ::bcom::solar::cloud::rpc::Image* unsafe_arena_release_image();

  // double timestamp = 3;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // int32 sensor_id = 1;
  void clear_sensor_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id() const;
  void set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sensor_id() const;
  void _internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bcom::solar::cloud::rpc::Image* image_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// -------------------------------------------------------------------

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  virtual ~Pose();
  explicit constexpr Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatFieldNumber = 1,
  };
  // .bcom.solar.cloud.rpc.Matrix4x4 mat = 1;
  bool has_mat() const;
  private:
  bool _internal_has_mat() const;
  public:
  void clear_mat();
  const ::bcom::solar::cloud::rpc::Matrix4x4& mat() const;
  ::bcom::solar::cloud::rpc::Matrix4x4* release_mat();
  ::bcom::solar::cloud::rpc::Matrix4x4* mutable_mat();
  void set_allocated_mat(::bcom::solar::cloud::rpc::Matrix4x4* mat);
  private:
  const ::bcom::solar::cloud::rpc::Matrix4x4& _internal_mat() const;
  ::bcom::solar::cloud::rpc::Matrix4x4* _internal_mutable_mat();
  public:
  void unsafe_arena_set_allocated_mat(
      ::bcom::solar::cloud::rpc::Matrix4x4* mat);
  ::bcom::solar::cloud::rpc::Matrix4x4* unsafe_arena_release_mat();

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::bcom::solar::cloud::rpc::Matrix4x4* mat_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// -------------------------------------------------------------------

class Matrix4x4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bcom.solar.cloud.rpc.Matrix4x4) */ {
 public:
  inline Matrix4x4() : Matrix4x4(nullptr) {}
  virtual ~Matrix4x4();
  explicit constexpr Matrix4x4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix4x4(const Matrix4x4& from);
  Matrix4x4(Matrix4x4&& from) noexcept
    : Matrix4x4() {
    *this = ::std::move(from);
  }

  inline Matrix4x4& operator=(const Matrix4x4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix4x4& operator=(Matrix4x4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix4x4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix4x4* internal_default_instance() {
    return reinterpret_cast<const Matrix4x4*>(
               &_Matrix4x4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Matrix4x4& a, Matrix4x4& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix4x4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix4x4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix4x4* New() const final {
    return CreateMaybeMessage<Matrix4x4>(nullptr);
  }

  Matrix4x4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix4x4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix4x4& from);
  void MergeFrom(const Matrix4x4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix4x4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bcom.solar.cloud.rpc.Matrix4x4";
  }
  protected:
  explicit Matrix4x4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sensor_5fdata_5fsender_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM14FieldNumber = 4,
    kM21FieldNumber = 5,
    kM22FieldNumber = 6,
    kM23FieldNumber = 7,
    kM24FieldNumber = 8,
    kM31FieldNumber = 9,
    kM32FieldNumber = 10,
    kM33FieldNumber = 11,
    kM34FieldNumber = 12,
    kM41FieldNumber = 13,
    kM42FieldNumber = 14,
    kM43FieldNumber = 15,
    kM44FieldNumber = 16,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 4;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 5;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 6;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 7;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 8;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 9;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 10;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 11;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 12;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // float m41 = 13;
  void clear_m41();
  float m41() const;
  void set_m41(float value);
  private:
  float _internal_m41() const;
  void _internal_set_m41(float value);
  public:

  // float m42 = 14;
  void clear_m42();
  float m42() const;
  void set_m42(float value);
  private:
  float _internal_m42() const;
  void _internal_set_m42(float value);
  public:

  // float m43 = 15;
  void clear_m43();
  float m43() const;
  void set_m43(float value);
  private:
  float _internal_m43() const;
  void _internal_set_m43(float value);
  public:

  // float m44 = 16;
  void clear_m44();
  float m44() const;
  void set_m44(float value);
  private:
  float _internal_m44() const;
  void _internal_set_m44(float value);
  public:

  // @@protoc_insertion_point(class_scope:bcom.solar.cloud.rpc.Matrix4x4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float m11_;
  float m12_;
  float m13_;
  float m14_;
  float m21_;
  float m22_;
  float m23_;
  float m24_;
  float m31_;
  float m32_;
  float m33_;
  float m34_;
  float m41_;
  float m42_;
  float m43_;
  float m44_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fdata_5fsender_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Message

// string message = 1;
inline void Message::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Message.message)
  return _internal_message();
}
inline void Message::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Message.message)
}
inline std::string* Message::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bcom.solar.cloud.rpc.Message.message)
  return _internal_mutable_message();
}
inline const std::string& Message::_internal_message() const {
  return message_.Get();
}
inline void Message::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcom.solar.cloud.rpc.Message.message)
}
inline void Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcom.solar.cloud.rpc.Message.message)
}
inline void Message::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcom.solar.cloud.rpc.Message.message)
}
inline std::string* Message::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:bcom.solar.cloud.rpc.Message.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcom.solar.cloud.rpc.Message.message)
}

// -------------------------------------------------------------------

// Image

// int32 width = 1;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Image.width)
}

// int32 height = 2;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Image.height)
}

// bytes data = 3;
inline void Image::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Image.data)
  return _internal_data();
}
inline void Image::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Image.data)
}
inline std::string* Image::mutable_data() {
  // @@protoc_insertion_point(field_mutable:bcom.solar.cloud.rpc.Image.data)
  return _internal_mutable_data();
}
inline const std::string& Image::_internal_data() const {
  return data_.Get();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Image::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bcom.solar.cloud.rpc.Image.data)
}
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bcom.solar.cloud.rpc.Image.data)
}
inline void Image::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bcom.solar.cloud.rpc.Image.data)
}
inline std::string* Image::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:bcom.solar.cloud.rpc.Image.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bcom.solar.cloud.rpc.Image.data)
}

// .bcom.solar.cloud.rpc.ImageLayout layout = 4;
inline void Image::clear_layout() {
  layout_ = 0;
}
inline ::bcom::solar::cloud::rpc::ImageLayout Image::_internal_layout() const {
  return static_cast< ::bcom::solar::cloud::rpc::ImageLayout >(layout_);
}
inline ::bcom::solar::cloud::rpc::ImageLayout Image::layout() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Image.layout)
  return _internal_layout();
}
inline void Image::_internal_set_layout(::bcom::solar::cloud::rpc::ImageLayout value) {
  
  layout_ = value;
}
inline void Image::set_layout(::bcom::solar::cloud::rpc::ImageLayout value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Image.layout)
}

// -------------------------------------------------------------------

// Frames

// repeated .bcom.solar.cloud.rpc.Frame frames = 1;
inline int Frames::_internal_frames_size() const {
  return frames_.size();
}
inline int Frames::frames_size() const {
  return _internal_frames_size();
}
inline void Frames::clear_frames() {
  frames_.Clear();
}
inline ::bcom::solar::cloud::rpc::Frame* Frames::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:bcom.solar.cloud.rpc.Frames.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcom::solar::cloud::rpc::Frame >*
Frames::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:bcom.solar.cloud.rpc.Frames.frames)
  return &frames_;
}
inline const ::bcom::solar::cloud::rpc::Frame& Frames::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::bcom::solar::cloud::rpc::Frame& Frames::frames(int index) const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Frames.frames)
  return _internal_frames(index);
}
inline ::bcom::solar::cloud::rpc::Frame* Frames::_internal_add_frames() {
  return frames_.Add();
}
inline ::bcom::solar::cloud::rpc::Frame* Frames::add_frames() {
  // @@protoc_insertion_point(field_add:bcom.solar.cloud.rpc.Frames.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bcom::solar::cloud::rpc::Frame >&
Frames::frames() const {
  // @@protoc_insertion_point(field_list:bcom.solar.cloud.rpc.Frames.frames)
  return frames_;
}

// fixed64 index = 2;
inline void Frames::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frames::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Frames::index() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Frames.index)
  return _internal_index();
}
inline void Frames::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void Frames::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Frames.index)
}

// -------------------------------------------------------------------

// Frame

// int32 sensor_id = 1;
inline void Frame::clear_sensor_id() {
  sensor_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_sensor_id() const {
  return sensor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::sensor_id() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Frame.sensor_id)
  return _internal_sensor_id();
}
inline void Frame::_internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sensor_id_ = value;
}
inline void Frame::set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Frame.sensor_id)
}

// .bcom.solar.cloud.rpc.Image image = 2;
inline bool Frame::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool Frame::has_image() const {
  return _internal_has_image();
}
inline void Frame::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::bcom::solar::cloud::rpc::Image& Frame::_internal_image() const {
  const ::bcom::solar::cloud::rpc::Image* p = image_;
  return p != nullptr ? *p : reinterpret_cast<const ::bcom::solar::cloud::rpc::Image&>(
      ::bcom::solar::cloud::rpc::_Image_default_instance_);
}
inline const ::bcom::solar::cloud::rpc::Image& Frame::image() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Frame.image)
  return _internal_image();
}
inline void Frame::unsafe_arena_set_allocated_image(
    ::bcom::solar::cloud::rpc::Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bcom.solar.cloud.rpc.Frame.image)
}
inline ::bcom::solar::cloud::rpc::Image* Frame::release_image() {
  
  ::bcom::solar::cloud::rpc::Image* temp = image_;
  image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bcom::solar::cloud::rpc::Image* Frame::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:bcom.solar.cloud.rpc.Frame.image)
  
  ::bcom::solar::cloud::rpc::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::bcom::solar::cloud::rpc::Image* Frame::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::bcom::solar::cloud::rpc::Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::bcom::solar::cloud::rpc::Image* Frame::mutable_image() {
  // @@protoc_insertion_point(field_mutable:bcom.solar.cloud.rpc.Frame.image)
  return _internal_mutable_image();
}
inline void Frame::set_allocated_image(::bcom::solar::cloud::rpc::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:bcom.solar.cloud.rpc.Frame.image)
}

// double timestamp = 3;
inline void Frame::clear_timestamp() {
  timestamp_ = 0;
}
inline double Frame::_internal_timestamp() const {
  return timestamp_;
}
inline double Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Frame.timestamp)
  return _internal_timestamp();
}
inline void Frame::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Frame::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Frame.timestamp)
}

// -------------------------------------------------------------------

// Pose

// .bcom.solar.cloud.rpc.Matrix4x4 mat = 1;
inline bool Pose::_internal_has_mat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mat_ != nullptr);
  return value;
}
inline bool Pose::has_mat() const {
  return _internal_has_mat();
}
inline void Pose::clear_mat() {
  if (GetArena() == nullptr && mat_ != nullptr) {
    delete mat_;
  }
  mat_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::bcom::solar::cloud::rpc::Matrix4x4& Pose::_internal_mat() const {
  const ::bcom::solar::cloud::rpc::Matrix4x4* p = mat_;
  return p != nullptr ? *p : reinterpret_cast<const ::bcom::solar::cloud::rpc::Matrix4x4&>(
      ::bcom::solar::cloud::rpc::_Matrix4x4_default_instance_);
}
inline const ::bcom::solar::cloud::rpc::Matrix4x4& Pose::mat() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Pose.mat)
  return _internal_mat();
}
inline void Pose::unsafe_arena_set_allocated_mat(
    ::bcom::solar::cloud::rpc::Matrix4x4* mat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mat_);
  }
  mat_ = mat;
  if (mat) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bcom.solar.cloud.rpc.Pose.mat)
}
inline ::bcom::solar::cloud::rpc::Matrix4x4* Pose::release_mat() {
  _has_bits_[0] &= ~0x00000001u;
  ::bcom::solar::cloud::rpc::Matrix4x4* temp = mat_;
  mat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bcom::solar::cloud::rpc::Matrix4x4* Pose::unsafe_arena_release_mat() {
  // @@protoc_insertion_point(field_release:bcom.solar.cloud.rpc.Pose.mat)
  _has_bits_[0] &= ~0x00000001u;
  ::bcom::solar::cloud::rpc::Matrix4x4* temp = mat_;
  mat_ = nullptr;
  return temp;
}
inline ::bcom::solar::cloud::rpc::Matrix4x4* Pose::_internal_mutable_mat() {
  _has_bits_[0] |= 0x00000001u;
  if (mat_ == nullptr) {
    auto* p = CreateMaybeMessage<::bcom::solar::cloud::rpc::Matrix4x4>(GetArena());
    mat_ = p;
  }
  return mat_;
}
inline ::bcom::solar::cloud::rpc::Matrix4x4* Pose::mutable_mat() {
  // @@protoc_insertion_point(field_mutable:bcom.solar.cloud.rpc.Pose.mat)
  return _internal_mutable_mat();
}
inline void Pose::set_allocated_mat(::bcom::solar::cloud::rpc::Matrix4x4* mat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mat_;
  }
  if (mat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mat);
    if (message_arena != submessage_arena) {
      mat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mat_ = mat;
  // @@protoc_insertion_point(field_set_allocated:bcom.solar.cloud.rpc.Pose.mat)
}

// -------------------------------------------------------------------

// Matrix4x4

// float m11 = 1;
inline void Matrix4x4::clear_m11() {
  m11_ = 0;
}
inline float Matrix4x4::_internal_m11() const {
  return m11_;
}
inline float Matrix4x4::m11() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m11)
  return _internal_m11();
}
inline void Matrix4x4::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void Matrix4x4::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m11)
}

// float m12 = 2;
inline void Matrix4x4::clear_m12() {
  m12_ = 0;
}
inline float Matrix4x4::_internal_m12() const {
  return m12_;
}
inline float Matrix4x4::m12() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m12)
  return _internal_m12();
}
inline void Matrix4x4::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void Matrix4x4::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m12)
}

// float m13 = 3;
inline void Matrix4x4::clear_m13() {
  m13_ = 0;
}
inline float Matrix4x4::_internal_m13() const {
  return m13_;
}
inline float Matrix4x4::m13() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m13)
  return _internal_m13();
}
inline void Matrix4x4::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void Matrix4x4::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m13)
}

// float m14 = 4;
inline void Matrix4x4::clear_m14() {
  m14_ = 0;
}
inline float Matrix4x4::_internal_m14() const {
  return m14_;
}
inline float Matrix4x4::m14() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m14)
  return _internal_m14();
}
inline void Matrix4x4::_internal_set_m14(float value) {
  
  m14_ = value;
}
inline void Matrix4x4::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m14)
}

// float m21 = 5;
inline void Matrix4x4::clear_m21() {
  m21_ = 0;
}
inline float Matrix4x4::_internal_m21() const {
  return m21_;
}
inline float Matrix4x4::m21() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m21)
  return _internal_m21();
}
inline void Matrix4x4::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void Matrix4x4::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m21)
}

// float m22 = 6;
inline void Matrix4x4::clear_m22() {
  m22_ = 0;
}
inline float Matrix4x4::_internal_m22() const {
  return m22_;
}
inline float Matrix4x4::m22() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m22)
  return _internal_m22();
}
inline void Matrix4x4::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void Matrix4x4::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m22)
}

// float m23 = 7;
inline void Matrix4x4::clear_m23() {
  m23_ = 0;
}
inline float Matrix4x4::_internal_m23() const {
  return m23_;
}
inline float Matrix4x4::m23() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m23)
  return _internal_m23();
}
inline void Matrix4x4::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void Matrix4x4::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m23)
}

// float m24 = 8;
inline void Matrix4x4::clear_m24() {
  m24_ = 0;
}
inline float Matrix4x4::_internal_m24() const {
  return m24_;
}
inline float Matrix4x4::m24() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m24)
  return _internal_m24();
}
inline void Matrix4x4::_internal_set_m24(float value) {
  
  m24_ = value;
}
inline void Matrix4x4::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m24)
}

// float m31 = 9;
inline void Matrix4x4::clear_m31() {
  m31_ = 0;
}
inline float Matrix4x4::_internal_m31() const {
  return m31_;
}
inline float Matrix4x4::m31() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m31)
  return _internal_m31();
}
inline void Matrix4x4::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void Matrix4x4::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m31)
}

// float m32 = 10;
inline void Matrix4x4::clear_m32() {
  m32_ = 0;
}
inline float Matrix4x4::_internal_m32() const {
  return m32_;
}
inline float Matrix4x4::m32() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m32)
  return _internal_m32();
}
inline void Matrix4x4::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void Matrix4x4::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m32)
}

// float m33 = 11;
inline void Matrix4x4::clear_m33() {
  m33_ = 0;
}
inline float Matrix4x4::_internal_m33() const {
  return m33_;
}
inline float Matrix4x4::m33() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m33)
  return _internal_m33();
}
inline void Matrix4x4::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void Matrix4x4::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m33)
}

// float m34 = 12;
inline void Matrix4x4::clear_m34() {
  m34_ = 0;
}
inline float Matrix4x4::_internal_m34() const {
  return m34_;
}
inline float Matrix4x4::m34() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m34)
  return _internal_m34();
}
inline void Matrix4x4::_internal_set_m34(float value) {
  
  m34_ = value;
}
inline void Matrix4x4::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m34)
}

// float m41 = 13;
inline void Matrix4x4::clear_m41() {
  m41_ = 0;
}
inline float Matrix4x4::_internal_m41() const {
  return m41_;
}
inline float Matrix4x4::m41() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m41)
  return _internal_m41();
}
inline void Matrix4x4::_internal_set_m41(float value) {
  
  m41_ = value;
}
inline void Matrix4x4::set_m41(float value) {
  _internal_set_m41(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m41)
}

// float m42 = 14;
inline void Matrix4x4::clear_m42() {
  m42_ = 0;
}
inline float Matrix4x4::_internal_m42() const {
  return m42_;
}
inline float Matrix4x4::m42() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m42)
  return _internal_m42();
}
inline void Matrix4x4::_internal_set_m42(float value) {
  
  m42_ = value;
}
inline void Matrix4x4::set_m42(float value) {
  _internal_set_m42(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m42)
}

// float m43 = 15;
inline void Matrix4x4::clear_m43() {
  m43_ = 0;
}
inline float Matrix4x4::_internal_m43() const {
  return m43_;
}
inline float Matrix4x4::m43() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m43)
  return _internal_m43();
}
inline void Matrix4x4::_internal_set_m43(float value) {
  
  m43_ = value;
}
inline void Matrix4x4::set_m43(float value) {
  _internal_set_m43(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m43)
}

// float m44 = 16;
inline void Matrix4x4::clear_m44() {
  m44_ = 0;
}
inline float Matrix4x4::_internal_m44() const {
  return m44_;
}
inline float Matrix4x4::m44() const {
  // @@protoc_insertion_point(field_get:bcom.solar.cloud.rpc.Matrix4x4.m44)
  return _internal_m44();
}
inline void Matrix4x4::_internal_set_m44(float value) {
  
  m44_ = value;
}
inline void Matrix4x4::set_m44(float value) {
  _internal_set_m44(value);
  // @@protoc_insertion_point(field_set:bcom.solar.cloud.rpc.Matrix4x4.m44)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace cloud
}  // namespace solar
}  // namespace bcom

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bcom::solar::cloud::rpc::ImageLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bcom::solar::cloud::rpc::ImageLayout>() {
  return ::bcom::solar::cloud::rpc::ImageLayout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_5fsender_2eproto
