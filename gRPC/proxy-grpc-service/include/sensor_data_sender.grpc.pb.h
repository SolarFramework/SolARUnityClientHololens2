// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensor_data_sender.proto
// Original file comments:
// Copyright (c) 2021 All Right Reserved, B-com http://www.b-com.com/
//
// This file is subject to the B<>Com License.
// All other rights reserved.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
#ifndef GRPC_sensor_5fdata_5fsender_2eproto__INCLUDED
#define GRPC_sensor_5fdata_5fsender_2eproto__INCLUDED

#include "sensor_data_sender.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bcom {
namespace solar {
namespace cloud {
namespace rpc {

// import "google/protobuf/empty.proto";
//
class SolARCloudProxy final {
 public:
  static constexpr char const* service_full_name() {
    return "bcom.solar.cloud.rpc.SolARCloudProxy";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::bcom::solar::cloud::rpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>> AsyncPing(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::bcom::solar::cloud::rpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>> AsyncSendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::bcom::solar::cloud::rpc::Pose* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>> AsyncSendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>>(AsyncSendFramesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>> PrepareAsyncSendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>>(PrepareAsyncSendFramesRaw(context, request, cq));
    }
    virtual ::grpc::Status SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::bcom::solar::cloud::rpc::Pose* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>> AsyncSendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>>(AsyncSendFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>> PrepareAsyncSendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>>(PrepareAsyncSendFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::bcom::solar::cloud::rpc::Frames>> StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::bcom::solar::cloud::rpc::Frames>>(StreamFramesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bcom::solar::cloud::rpc::Frames>> AsyncStreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bcom::solar::cloud::rpc::Frames>>(AsyncStreamFramesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bcom::solar::cloud::rpc::Frames>> PrepareAsyncStreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bcom::solar::cloud::rpc::Frames>>(PrepareAsyncStreamFramesRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::ClientWriteReactor< ::bcom::solar::cloud::rpc::Frames>* reactor) = 0;
      #else
      virtual void StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientWriteReactor< ::bcom::solar::cloud::rpc::Frames>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Empty>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>* AsyncSendFramesRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>* PrepareAsyncSendFramesRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>* AsyncSendFrameRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bcom::solar::cloud::rpc::Pose>* PrepareAsyncSendFrameRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::bcom::solar::cloud::rpc::Frames>* StreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bcom::solar::cloud::rpc::Frames>* AsyncStreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bcom::solar::cloud::rpc::Frames>* PrepareAsyncStreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::bcom::solar::cloud::rpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>> AsyncPing(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::bcom::solar::cloud::rpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>> AsyncSendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::bcom::solar::cloud::rpc::Pose* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>> AsyncSendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>>(AsyncSendFramesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>> PrepareAsyncSendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>>(PrepareAsyncSendFramesRaw(context, request, cq));
    }
    ::grpc::Status SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::bcom::solar::cloud::rpc::Pose* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>> AsyncSendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>>(AsyncSendFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>> PrepareAsyncSendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>>(PrepareAsyncSendFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::bcom::solar::cloud::rpc::Frames>> StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::bcom::solar::cloud::rpc::Frames>>(StreamFramesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>> AsyncStreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>>(AsyncStreamFramesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>> PrepareAsyncStreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>>(PrepareAsyncStreamFramesRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::ClientWriteReactor< ::bcom::solar::cloud::rpc::Frames>* reactor) override;
      #else
      void StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientWriteReactor< ::bcom::solar::cloud::rpc::Frames>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* AsyncSendFramesRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* PrepareAsyncSendFramesRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* AsyncSendFrameRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* PrepareAsyncSendFrameRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::bcom::solar::cloud::rpc::Frames>* StreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response) override;
    ::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>* AsyncStreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>* PrepareAsyncStreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendFrames_;
    const ::grpc::internal::RpcMethod rpcmethod_SendFrame_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamFrames_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response);
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response);
    virtual ::grpc::Status SendFrames(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response);
    virtual ::grpc::Status SendFrame(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response);
    virtual ::grpc::Status StreamFrames(::grpc::ServerContext* context, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* reader, ::bcom::solar::cloud::rpc::Pose* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::bcom::solar::cloud::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bcom::solar::cloud::rpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::bcom::solar::cloud::rpc::Message* request, ::grpc::ServerAsyncResponseWriter< ::bcom::solar::cloud::rpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendFrames() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrames(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFrames(::grpc::ServerContext* context, ::bcom::solar::cloud::rpc::Frames* request, ::grpc::ServerAsyncResponseWriter< ::bcom::solar::cloud::rpc::Pose>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendFrame() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrame(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFrame(::grpc::ServerContext* context, ::bcom::solar::cloud::rpc::Frame* request, ::grpc::ServerAsyncResponseWriter< ::bcom::solar::cloud::rpc::Pose>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamFrames() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* /*reader*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamFrames(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::bcom::solar::cloud::rpc::Pose, ::bcom::solar::cloud::rpc::Frames>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_SendMessage<WithAsyncMethod_SendFrames<WithAsyncMethod_SendFrame<WithAsyncMethod_StreamFrames<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::experimental::MessageAllocator< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::experimental::MessageAllocator< ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendFrames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response) { return this->SendFrames(context, request, response); }));}
    void SetMessageAllocatorFor_SendFrames(
        ::grpc::experimental::MessageAllocator< ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrames(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendFrames(
      ::grpc::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendFrames(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response) { return this->SendFrame(context, request, response); }));}
    void SetMessageAllocatorFor_SendFrame(
        ::grpc::experimental::MessageAllocator< ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrame(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamFrames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::bcom::solar::cloud::rpc::Pose* response) { return this->StreamFrames(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* /*reader*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::bcom::solar::cloud::rpc::Frames>* StreamFrames(
      ::grpc::CallbackServerContext* /*context*/, ::bcom::solar::cloud::rpc::Pose* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::bcom::solar::cloud::rpc::Frames>* StreamFrames(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::bcom::solar::cloud::rpc::Pose* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_SendMessage<ExperimentalWithCallbackMethod_SendFrames<ExperimentalWithCallbackMethod_SendFrame<ExperimentalWithCallbackMethod_StreamFrames<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_SendMessage<ExperimentalWithCallbackMethod_SendFrames<ExperimentalWithCallbackMethod_SendFrame<ExperimentalWithCallbackMethod_StreamFrames<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendFrames() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrames(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendFrame() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrame(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamFrames() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* /*reader*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendFrames() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrames(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFrames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendFrame() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrame(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendFrame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamFrames() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* /*reader*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamFrames(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendFrames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendFrames(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrames(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendFrames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendFrames(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendFrame(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendFrame(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamFrames() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->StreamFrames(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* /*reader*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* StreamFrames(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* StreamFrames(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Empty* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bcom::solar::cloud::rpc::Empty,::bcom::solar::cloud::rpc::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Message* /*request*/, ::bcom::solar::cloud::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bcom::solar::cloud::rpc::Message,::bcom::solar::cloud::rpc::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendFrames() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>* streamer) {
                       return this->StreamedSendFrames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendFrames(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frames* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendFrames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bcom::solar::cloud::rpc::Frames,::bcom::solar::cloud::rpc::Pose>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendFrame() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose>* streamer) {
                       return this->StreamedSendFrame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendFrame(::grpc::ServerContext* /*context*/, const ::bcom::solar::cloud::rpc::Frame* /*request*/, ::bcom::solar::cloud::rpc::Pose* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendFrame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bcom::solar::cloud::rpc::Frame,::bcom::solar::cloud::rpc::Pose>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SendFrames<WithStreamedUnaryMethod_SendFrame<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SendFrames<WithStreamedUnaryMethod_SendFrame<Service > > > > StreamedService;
};

}  // namespace rpc
}  // namespace cloud
}  // namespace solar
}  // namespace bcom


#endif  // GRPC_sensor_5fdata_5fsender_2eproto__INCLUDED
