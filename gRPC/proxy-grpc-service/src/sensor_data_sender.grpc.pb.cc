// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensor_data_sender.proto

#include "sensor_data_sender.pb.h"
#include "sensor_data_sender.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bcom {
namespace solar {
namespace cloud {
namespace rpc {

static const char* SolARCloudProxy_method_names[] = {
  "/bcom.solar.cloud.rpc.SolARCloudProxy/Ping",
  "/bcom.solar.cloud.rpc.SolARCloudProxy/SendMessage",
  "/bcom.solar.cloud.rpc.SolARCloudProxy/SendFrames",
  "/bcom.solar.cloud.rpc.SolARCloudProxy/SendFrame",
  "/bcom.solar.cloud.rpc.SolARCloudProxy/StreamFrames",
};

std::unique_ptr< SolARCloudProxy::Stub> SolARCloudProxy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SolARCloudProxy::Stub> stub(new SolARCloudProxy::Stub(channel));
  return stub;
}

SolARCloudProxy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(SolARCloudProxy_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(SolARCloudProxy_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendFrames_(SolARCloudProxy_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendFrame_(SolARCloudProxy_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamFrames_(SolARCloudProxy_method_names[4], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status SolARCloudProxy::Stub::Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::bcom::solar::cloud::rpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void SolARCloudProxy::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void SolARCloudProxy::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* SolARCloudProxy::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* SolARCloudProxy::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARCloudProxy::Stub::SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::bcom::solar::cloud::rpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void SolARCloudProxy::Stub::experimental_async::SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void SolARCloudProxy::Stub::experimental_async::SendMessage(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* SolARCloudProxy::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Empty>* SolARCloudProxy::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARCloudProxy::Stub::SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::bcom::solar::cloud::rpc::Pose* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendFrames_, context, request, response);
}

void SolARCloudProxy::Stub::experimental_async::SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFrames_, context, request, response, std::move(f));
}

void SolARCloudProxy::Stub::experimental_async::SendFrames(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFrames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* SolARCloudProxy::Stub::PrepareAsyncSendFramesRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bcom::solar::cloud::rpc::Pose, ::bcom::solar::cloud::rpc::Frames, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendFrames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* SolARCloudProxy::Stub::AsyncSendFramesRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frames& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendFramesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SolARCloudProxy::Stub::SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::bcom::solar::cloud::rpc::Pose* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendFrame_, context, request, response);
}

void SolARCloudProxy::Stub::experimental_async::SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFrame_, context, request, response, std::move(f));
}

void SolARCloudProxy::Stub::experimental_async::SendFrame(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* SolARCloudProxy::Stub::PrepareAsyncSendFrameRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bcom::solar::cloud::rpc::Pose, ::bcom::solar::cloud::rpc::Frame, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendFrame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bcom::solar::cloud::rpc::Pose>* SolARCloudProxy::Stub::AsyncSendFrameRaw(::grpc::ClientContext* context, const ::bcom::solar::cloud::rpc::Frame& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendFrameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::bcom::solar::cloud::rpc::Frames>* SolARCloudProxy::Stub::StreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response) {
  return ::grpc::internal::ClientWriterFactory< ::bcom::solar::cloud::rpc::Frames>::Create(channel_.get(), rpcmethod_StreamFrames_, context, response);
}

void SolARCloudProxy::Stub::experimental_async::StreamFrames(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::experimental::ClientWriteReactor< ::bcom::solar::cloud::rpc::Frames>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::bcom::solar::cloud::rpc::Frames>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamFrames_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>* SolARCloudProxy::Stub::AsyncStreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bcom::solar::cloud::rpc::Frames>::Create(channel_.get(), cq, rpcmethod_StreamFrames_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::bcom::solar::cloud::rpc::Frames>* SolARCloudProxy::Stub::PrepareAsyncStreamFramesRaw(::grpc::ClientContext* context, ::bcom::solar::cloud::rpc::Pose* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bcom::solar::cloud::rpc::Frames>::Create(channel_.get(), cq, rpcmethod_StreamFrames_, context, response, false, nullptr);
}

SolARCloudProxy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARCloudProxy_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARCloudProxy::Service, ::bcom::solar::cloud::rpc::Empty, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARCloudProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bcom::solar::cloud::rpc::Empty* req,
             ::bcom::solar::cloud::rpc::Empty* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARCloudProxy_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARCloudProxy::Service, ::bcom::solar::cloud::rpc::Message, ::bcom::solar::cloud::rpc::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARCloudProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bcom::solar::cloud::rpc::Message* req,
             ::bcom::solar::cloud::rpc::Empty* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARCloudProxy_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARCloudProxy::Service, ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARCloudProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bcom::solar::cloud::rpc::Frames* req,
             ::bcom::solar::cloud::rpc::Pose* resp) {
               return service->SendFrames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARCloudProxy_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SolARCloudProxy::Service, ::bcom::solar::cloud::rpc::Frame, ::bcom::solar::cloud::rpc::Pose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SolARCloudProxy::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bcom::solar::cloud::rpc::Frame* req,
             ::bcom::solar::cloud::rpc::Pose* resp) {
               return service->SendFrame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SolARCloudProxy_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< SolARCloudProxy::Service, ::bcom::solar::cloud::rpc::Frames, ::bcom::solar::cloud::rpc::Pose>(
          [](SolARCloudProxy::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::bcom::solar::cloud::rpc::Frames>* reader,
             ::bcom::solar::cloud::rpc::Pose* resp) {
               return service->StreamFrames(ctx, reader, resp);
             }, this)));
}

SolARCloudProxy::Service::~Service() {
}

::grpc::Status SolARCloudProxy::Service::Ping(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Empty* request, ::bcom::solar::cloud::rpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARCloudProxy::Service::SendMessage(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Message* request, ::bcom::solar::cloud::rpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARCloudProxy::Service::SendFrames(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Frames* request, ::bcom::solar::cloud::rpc::Pose* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARCloudProxy::Service::SendFrame(::grpc::ServerContext* context, const ::bcom::solar::cloud::rpc::Frame* request, ::bcom::solar::cloud::rpc::Pose* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SolARCloudProxy::Service::StreamFrames(::grpc::ServerContext* context, ::grpc::ServerReader< ::bcom::solar::cloud::rpc::Frames>* reader, ::bcom::solar::cloud::rpc::Pose* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bcom
}  // namespace solar
}  // namespace cloud
}  // namespace rpc

