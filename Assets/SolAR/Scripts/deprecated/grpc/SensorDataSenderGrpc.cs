// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor_data_sender.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2021 All Right Reserved, B-com http://www.b-com.com/
//
// This file is subject to the B<>Com License.
// All other rights reserved.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Bcom.Solar.Cloud.Rpc {
  public static partial class SolARCloudProxy
  {
    static readonly string __ServiceName = "bcom.solar.cloud.rpc.SolARCloudProxy";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Bcom.Solar.Cloud.Rpc.Empty> __Marshaller_bcom_solar_cloud_rpc_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bcom.Solar.Cloud.Rpc.Empty.Parser));
    static readonly grpc::Marshaller<global::Bcom.Solar.Cloud.Rpc.Message> __Marshaller_bcom_solar_cloud_rpc_Message = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bcom.Solar.Cloud.Rpc.Message.Parser));
    static readonly grpc::Marshaller<global::Bcom.Solar.Cloud.Rpc.Frames> __Marshaller_bcom_solar_cloud_rpc_Frames = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bcom.Solar.Cloud.Rpc.Frames.Parser));
    static readonly grpc::Marshaller<global::Bcom.Solar.Cloud.Rpc.Pose> __Marshaller_bcom_solar_cloud_rpc_Pose = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bcom.Solar.Cloud.Rpc.Pose.Parser));
    static readonly grpc::Marshaller<global::Bcom.Solar.Cloud.Rpc.Frame> __Marshaller_bcom_solar_cloud_rpc_Frame = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Bcom.Solar.Cloud.Rpc.Frame.Parser));

    static readonly grpc::Method<global::Bcom.Solar.Cloud.Rpc.Empty, global::Bcom.Solar.Cloud.Rpc.Empty> __Method_Ping = new grpc::Method<global::Bcom.Solar.Cloud.Rpc.Empty, global::Bcom.Solar.Cloud.Rpc.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_bcom_solar_cloud_rpc_Empty,
        __Marshaller_bcom_solar_cloud_rpc_Empty);

    static readonly grpc::Method<global::Bcom.Solar.Cloud.Rpc.Message, global::Bcom.Solar.Cloud.Rpc.Empty> __Method_SendMessage = new grpc::Method<global::Bcom.Solar.Cloud.Rpc.Message, global::Bcom.Solar.Cloud.Rpc.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_bcom_solar_cloud_rpc_Message,
        __Marshaller_bcom_solar_cloud_rpc_Empty);

    static readonly grpc::Method<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose> __Method_SendFrames = new grpc::Method<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendFrames",
        __Marshaller_bcom_solar_cloud_rpc_Frames,
        __Marshaller_bcom_solar_cloud_rpc_Pose);

    static readonly grpc::Method<global::Bcom.Solar.Cloud.Rpc.Frame, global::Bcom.Solar.Cloud.Rpc.Pose> __Method_SendFrame = new grpc::Method<global::Bcom.Solar.Cloud.Rpc.Frame, global::Bcom.Solar.Cloud.Rpc.Pose>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendFrame",
        __Marshaller_bcom_solar_cloud_rpc_Frame,
        __Marshaller_bcom_solar_cloud_rpc_Pose);

    static readonly grpc::Method<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose> __Method_StreamFrames = new grpc::Method<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamFrames",
        __Marshaller_bcom_solar_cloud_rpc_Frames,
        __Marshaller_bcom_solar_cloud_rpc_Pose);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bcom.Solar.Cloud.Rpc.SensorDataSenderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SolARCloudProxy</summary>
    [grpc::BindServiceMethod(typeof(SolARCloudProxy), "BindService")]
    public abstract partial class SolARCloudProxyBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Bcom.Solar.Cloud.Rpc.Empty> Ping(global::Bcom.Solar.Cloud.Rpc.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bcom.Solar.Cloud.Rpc.Empty> SendMessage(global::Bcom.Solar.Cloud.Rpc.Message request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bcom.Solar.Cloud.Rpc.Pose> SendFrames(global::Bcom.Solar.Cloud.Rpc.Frames request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bcom.Solar.Cloud.Rpc.Pose> SendFrame(global::Bcom.Solar.Cloud.Rpc.Frame request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Bcom.Solar.Cloud.Rpc.Pose> StreamFrames(grpc::IAsyncStreamReader<global::Bcom.Solar.Cloud.Rpc.Frames> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SolARCloudProxy</summary>
    public partial class SolARCloudProxyClient : grpc::ClientBase<SolARCloudProxyClient>
    {
      /// <summary>Creates a new client for SolARCloudProxy</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SolARCloudProxyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SolARCloudProxy that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SolARCloudProxyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SolARCloudProxyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SolARCloudProxyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Bcom.Solar.Cloud.Rpc.Empty Ping(global::Bcom.Solar.Cloud.Rpc.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Empty Ping(global::Bcom.Solar.Cloud.Rpc.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Empty> PingAsync(global::Bcom.Solar.Cloud.Rpc.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Empty> PingAsync(global::Bcom.Solar.Cloud.Rpc.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Empty SendMessage(global::Bcom.Solar.Cloud.Rpc.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Empty SendMessage(global::Bcom.Solar.Cloud.Rpc.Message request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Empty> SendMessageAsync(global::Bcom.Solar.Cloud.Rpc.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Empty> SendMessageAsync(global::Bcom.Solar.Cloud.Rpc.Message request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Pose SendFrames(global::Bcom.Solar.Cloud.Rpc.Frames request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Pose SendFrames(global::Bcom.Solar.Cloud.Rpc.Frames request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendFrames, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Pose> SendFramesAsync(global::Bcom.Solar.Cloud.Rpc.Frames request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFramesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Pose> SendFramesAsync(global::Bcom.Solar.Cloud.Rpc.Frames request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendFrames, null, options, request);
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Pose SendFrame(global::Bcom.Solar.Cloud.Rpc.Frame request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Bcom.Solar.Cloud.Rpc.Pose SendFrame(global::Bcom.Solar.Cloud.Rpc.Frame request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendFrame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Pose> SendFrameAsync(global::Bcom.Solar.Cloud.Rpc.Frame request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFrameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Bcom.Solar.Cloud.Rpc.Pose> SendFrameAsync(global::Bcom.Solar.Cloud.Rpc.Frame request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendFrame, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose> StreamFrames(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamFrames(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose> StreamFrames(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamFrames, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SolARCloudProxyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SolARCloudProxyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SolARCloudProxyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage)
          .AddMethod(__Method_SendFrames, serviceImpl.SendFrames)
          .AddMethod(__Method_SendFrame, serviceImpl.SendFrame)
          .AddMethod(__Method_StreamFrames, serviceImpl.StreamFrames).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SolARCloudProxyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bcom.Solar.Cloud.Rpc.Empty, global::Bcom.Solar.Cloud.Rpc.Empty>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_SendMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bcom.Solar.Cloud.Rpc.Message, global::Bcom.Solar.Cloud.Rpc.Empty>(serviceImpl.SendMessage));
      serviceBinder.AddMethod(__Method_SendFrames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose>(serviceImpl.SendFrames));
      serviceBinder.AddMethod(__Method_SendFrame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Bcom.Solar.Cloud.Rpc.Frame, global::Bcom.Solar.Cloud.Rpc.Pose>(serviceImpl.SendFrame));
      serviceBinder.AddMethod(__Method_StreamFrames, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Bcom.Solar.Cloud.Rpc.Frames, global::Bcom.Solar.Cloud.Rpc.Pose>(serviceImpl.StreamFrames));
    }

  }
}
#endregion
